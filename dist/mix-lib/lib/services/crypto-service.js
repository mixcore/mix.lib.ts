import CryptoJS from 'crypto-ts';
export class CryptoService {
    constructor() {
        this.size = 256;
    }
    encryptAES(message, iCompleteEncodedKey) {
        const aesKeys = new AESKey(iCompleteEncodedKey);
        const options = {
            iv: aesKeys.iv,
            keySize: this.size / 8,
            mode: CryptoJS.mode.CBC,
            padding: CryptoJS.pad.PKCS7,
        };
        return CryptoJS.AES.encrypt(message, aesKeys.key, options).toString();
    }
    decryptAES(ciphertext, iCompleteEncodedKey) {
        const aesKeys = new AESKey(iCompleteEncodedKey);
        const options = {
            iv: aesKeys.iv,
            keySize: this.size / 8,
            mode: CryptoJS.mode.CBC,
            padding: CryptoJS.pad.PKCS7,
        };
        const decrypted = CryptoJS.AES.decrypt(ciphertext, aesKeys.key, options);
        return decrypted.toString(CryptoJS.enc.Utf8);
    }
}
export class AESKey {
    /**
     *
     */
    constructor(encryptedKeys) {
        const keyStrings = CryptoJS.enc.Utf8.stringify(CryptoJS.enc.Hex.parse(encryptedKeys)).split(',');
        this.iv = CryptoJS.enc.Hex.parse(keyStrings[0]);
        this.key = CryptoJS.enc.Hex.parse(keyStrings[1]).toString();
    }
}
export const cryptoService = new CryptoService();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3J5cHRvLXNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL3NlcnZpY2VzL2NyeXB0by1zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sUUFBUSxNQUFNLFdBQVcsQ0FBQztBQUNqQyxNQUFNLE9BQU8sYUFBYTtJQUExQjtRQUNTLFNBQUksR0FBRyxHQUFHLENBQUM7SUFzQnBCLENBQUM7SUFyQlEsVUFBVSxDQUFDLE9BQWUsRUFBRSxtQkFBMkI7UUFDNUQsTUFBTSxPQUFPLEdBQUcsSUFBSSxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUNoRCxNQUFNLE9BQU8sR0FBRztZQUNkLEVBQUUsRUFBRSxPQUFPLENBQUMsRUFBRTtZQUNkLE9BQU8sRUFBRSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUM7WUFDdEIsSUFBSSxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRztZQUN2QixPQUFPLEVBQUUsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLO1NBQzVCLENBQUM7UUFDRixPQUFPLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3hFLENBQUM7SUFDTSxVQUFVLENBQUMsVUFBa0IsRUFBRSxtQkFBMkI7UUFDL0QsTUFBTSxPQUFPLEdBQUcsSUFBSSxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUNoRCxNQUFNLE9BQU8sR0FBRztZQUNkLEVBQUUsRUFBRSxPQUFPLENBQUMsRUFBRTtZQUNkLE9BQU8sRUFBRSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUM7WUFDdEIsSUFBSSxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRztZQUN2QixPQUFPLEVBQUUsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLO1NBQzVCLENBQUM7UUFDRixNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN6RSxPQUFPLFNBQVMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvQyxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sTUFBTTtJQUlqQjs7T0FFRztJQUNILFlBQVksYUFBcUI7UUFDL0IsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUM1QyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQ3RDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2IsSUFBSSxDQUFDLEVBQUUsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLEdBQUcsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDOUQsQ0FBQztDQUNGO0FBRUQsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLElBQUksYUFBYSxFQUFFLENBQUMifQ==